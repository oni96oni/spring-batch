★★★스프링 배치 도메인 이해
    목차 소개

    Job
        배치 계층 구조에서 가장 상위에 있는 개념 -> 하나의 배치 작업 자체를 의미함. (배치를 이렇게 진행할거야!를 나타낸다.)
        이 Job에 대한 실체가 있다 -> Job Configuration을 통해 생성되는 객체 단위로써 어떻게 구성하고 실행할것인지
        명세해놓은 객체가 바로 Job 이다.

        스프링 배치가 기본 구현체를 제공한다.(이게 JobBuilderFactory 말하는건가??? 아니다 SimpleJob, FlowJob말하는거야)
        여러 Step을 포함하고 있는 컨테이너로서 반드시 한개 이상의 Step으로 구성해야 함!

        2. 기본 구현체
            SimpleJob
                순차적으로 Step을 실행시키는 Job
                모든 Job에서 유용하게 사용할 수 있는 표준 기능을 갖고 있다.
            FlowJob
                특정한 조건과 흐름에 따라 Step을 구성하여 실행시키는 Job (step의 흐름을 제어가능)
                Flow 객체를 실행시켜서 작업을 진행함

        JobParameters -> JobLauncher -> (run(job,parameters)) -> Job -> (execute()) -> steps(여러개도 가능)

    JobInstance
        Job의 설정과 구성은 동일하지만 Job이 실행되는 시점에 처리하는 내용은 다르기 때문에 Job의 실행을 구분해야한다.
            (매일매일 EOD작업을 위해 배치를 돌리듯이!)
        이러한 구분을 위해 JobInstance를 사용한다.
            (매일 실행되는 각각의 Job을 JobInstance로 표현한다.)
        Job이 실행될때마다 그 데이터를 저장하는데 -> 메타데이터
        Job, Step, tasklet, flow <-> JobExecution, StepExecution 구분하기

        jobLauncher가 job을 실행, 인자를 2개 받는데 1개는 job, 1개는 jobParameter이다.
        실행하는데 처음시작하는 Job + JobParameter 인경우 새로운 JobInstance가 생성된다.
        실행한적이 있는 Job + JobParameter 인경우 기존에 생성된 JobInstance를 리턴한다.
            (똑같은 Job과 JobParameter인경우에는 결과가 똑같을 수 밖에 없으니까!)
        내부적으로 JobName + JobKey를 조합하여(해시) 를 가지고 JobInstance를 구분한다.

        Job과는 1:M 관계

        Job을 실행시키는 클래스가 바로 JobLauncher
        JobLauncher를 실행시키기 위해서는 두개의 인자가 필요(Job, JobParameter)
        JobRepository Job실행중에 발생하는 메타데이터의 저장소 역할을 한다.
            우선 받은 인자의 값으로 DB에 조회를 해서 실행을 한적이 있는지 없는지 확인을 먼저 한다!

    JobParameter

