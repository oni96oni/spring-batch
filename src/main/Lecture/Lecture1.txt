스프링 배치 시작
    프로젝트 구성 및 의존성 설정
        스프링 배치 활성화를 위해서
        @EnableBatchProcessing 어노테이션이 필요하다.
        총 4개의 설정 클래스를 실행시키며 스프링 배치의 모든 초기화 및 실행 구성이 이루어진다.
            4개의 설정 클래스에는 무엇이 있을까???
            1.BatchAutoConfiguration
                스프링 배치가 초기화 될 때 자동으로 실행되는 설정 클래스
                Job을 수행하는 JobLauncherApplicationRunner 빈을 생성
            2.SimpleBatchConfiguration
                JobBuilderFactory와 StepBuilderFactory 생성
                스프링 배치의 주요 구성 요소 생성 -> 프록시 객체로 생성됨
            3.BatchConfigurerConfiguration
                3.1.BasicBatchConfigurer
                    SimpleBatchConfiguration에서 생성한 프록시 객체의 실제 대상 객체를 생성하는 설정클래스
                    빈으로 의존성 주입 받아서 주요 객체들을 참조해서 사용할 수 있다.
                3.2.JpaBatchConfigurer
                    JPA 관련 객체를 생성하는 설정 클래스
                사용자 정의 BatchConfigurer를 만들어서 사용할 수 있다.
        스프링 부트 배치의 자동 설정 클래스가 실행됨으로 빈으로 등록된 모든 Job을 검색해서 초기화와 동시에 Job을 수행하도록 구성됨

        2 -> 3 -> 1 순으로 실행됨

        빈들을 생성할때 createLazyProxy() 메서드를 사용해서 프록시 객체를 생성한다.(실제 객체는 아니다.)

    Hello Spring Batch 시작하기
        1. @Configuration
            하나의 배치 Job을 정의하고 빈 설정
        2. JobBuilderFactory
            Job을 생성하는 빌더 팩토리
        3. StepBuilderFacytory
            Step을 생성하는 빌더 팩토리
        4. Job
            helloJob 이름으로 Job 생성
        5. Step
            helloStep 이름으로 Step 생성
        6. tasklet
            Step 안에서 단일 테스크로 수행되는 로직 구현
        7. Job 구동 -> Step을 실행 -> Tasklet을 실행

        Job이 구동되면 Step을 실행하고 Step이 구동되면 Tasklet을 실행하도록 설정함(여기에서는)

        jobBuilderFactory.get("helloJob") -> Job 객체 생성
        stepBuilderFactyory.get("helloStep") -> Step 객체 생성
        tasklet(contribution, chunkContext) -> Tasklet 객체 생성

        Job이 구동되면 Step을 실행하고 Step이 구동되면 Tasklet을 실행하도록 설정함

        Job
            일, 일감
            여러 단계의 항목 구성
        Step
            일의 항목, 단계
        Tasklet
            실제의 작업 내용

        tasklet을 무한반복시켜서 제어하기 위해 repeatStatus에서 반복을 계속할지 종료할지 결정한다.

    DB 스키마 생성 및 이해(1)